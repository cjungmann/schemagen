#!/usr/bin/env python

import sys

import sgdb
from sgscripts import SGScripter
    
# Global dictionary with some default values that stores command line options.
arg_dict = {
    "host_name": "192.168.0.20",
    "user_name": "chuck",
    "user_password": None,
    "database_name": None,
    "table_name": None,
    "list": None,
    "action": None
}

# Dictionary to connect command line flags to arg_dict keys
label_dict = {
    "H": "host_name",
    "u": "user_name",
    "p": "user_password",
    "d": "database_name",
    "t": "table_name",
    "l": "display list",
    "a": "action"
}

actions_dict = {
    "h": "show_usage",
}

options_dict = {
    "h": "show usage (help)",
    "u": "mysql user name",
    "p": "mysql user password",
    "H": "mysql host name",
    "d": "mysql database name",
    "t": "mysql table name",
    "a": "schemagen action"
}

lists_dict = {
    "tables": getattr(sgdb, "display_tables"),
    "procs" : getattr(sgdb, "display_procs")
}

def show_usage():
    global options_dict
    print("The available options are:")
    for key, value in options_dict.items():
          print(f"{key}:  {value}")

def key_from_value(dict, value):
    """ Returns first dictionary item whose value matches 'value'
    Args:
       dict (dictionary): Dictionary to be searched
       value (string):    Value to be matched to a dictionary element

    Returns:
       key value for matching item, None if not found
       desired item, or None if not found
    """
    for item in dict.items():
        if (item[1] == value):
            return item[0]

    return None
    

def set_arg_dict(flag, value):
    """ Sets a dictionary value with command line options flags.
    Args:
       None

    Returns:
      None
    """
    global label_dict, arg_dict
    if (flag in label_dict):
        arg_dict[label_dict[flag]] = value

def process_cl_args():
    """ Read command line arguments to set global arg_dict.
    Args:
       None

    Returns:
      Boolean: true if successful, false otherwise
    """
    inarg = None
    for arg in sys.argv[1:]:
        if (inarg is not None):
            set_arg_dict(inarg, arg)
            inarg = None
        elif (len(arg) and arg[0] == '-'):
            inarg = arg[1]

    return True

def validate_cl_args():
    """ Identify missing or bad info and display args before running.
    Args:
       None

    Returns:
       True if arguments are valid, False otherwise
    """
    global arg_dict, label_dict
    arg_values_set = True
    # for key, value in arg_dict.items():
    #     if (value is None and key != "table_name"):
    #         arg_values_set = False
    #         cl_option = key_from_value(label_dict, key)
    #         if (cl_option):
    #             print("User must provide value for {} (use -{}).".format(key, cl_option))
    #         else:
    #             print("User must provide value for {} (ERROR finding option).".format(key))

    return arg_values_set

def print_procedure_intro():
    print()
    print( "-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --" )

def process_connection(conn):
    db_name = arg_dict["database_name"]
    table_name = arg_dict["table_name"]

    print("Processing the connection")
    if ( db_name is None ):
        sgdb.show_database_names(conn)
    elif ( table_name is None ):
        sgdb.show_table_names(conn, db_name)
    else:
        print("We have a database {} and table {}.".format(db_name, table_name))

        cdefs = sgdb.collect_table_columns(conn, db_name, table_name)

        scripter = SGScripter()
        print_procedure_intro()
        scripter.print_proc_list(table_name, "App_Person_List", cdefs)
        print_procedure_intro()
        scripter.print_proc_add(table_name, "App_Person_Add", cdefs, "App_Person_List")
        print_procedure_intro()
        scripter.print_proc_read(table_name, "App_Person_Read", cdefs)
        print_procedure_intro()
        scripter.print_proc_update(table_name, "App_Person_Update", cdefs, "App_Person_List")

        scripter.get_autonumber_primary_key(cdefs)


def main():
    global arg_dict

    if (len(sys.argv) == 1):
        show_usage();
    else:
        if process_cl_args():
            if (validate_cl_args()):
                conn = sgdb.make_connection(arg_dict["host_name"],
                                            arg_dict["user_name"],
                                            arg_dict["user_password"])
                if conn:
                    process_connection(conn)
                    conn.close()
                else:
                    print("Failed to get a connection.")
            else:
                print("Can't proceed without missing arguments.")
        else:
            print("Failed to process the command line arguments.")

          
if __name__ == "__main__":
    main()
    
