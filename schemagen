#!/usr/bin/env python

import argparse
import sgdb
from sgscripts import SGScripter

def prepare_argparse(parser):
    list_choices=[ "databases", "tables", "procedures" ]

    script_choices=[ "all", "list", "add", "read", "update", "delete" ]

    # parser.add_argument("-h", "--help", help="Show usage")
    parser.add_argument("-H", "--host", help="Host address of MariaDB database")
    parser.add_argument("-u", "--user", help="MariaDB user account name")
    parser.add_argument("-d", "--database", help="MariaDB database to use")
    parser.add_argument("-t", "--table", help="MariaDB table to use")
    parser.add_argument("-p", "--password", help="MariaDB user account password")

    parser.add_argument("-l", "--list", choices=list_choices,
                        help="Display list of items.")

    parser.add_argument("-s", "--script", choices=script_choices,
                        help="Produce indicate procedure from table.")


def make_connection(args):
    host = args["host"]
    user = args["user"]
    password = args["password"]

    print("Using {}, {}, {}.".format(host, user, password))

    if host and user:
        print("Attempting to make a connection!")
        return sgdb.make_connection(host, user, password)
    else:
        print("Abandoning attempt to make connection (missing values.)")
        return None

def show_list_of_items(conn, database, list_type):
    """Output a list of names as indicated by list_choices in prepare_argparse().

    Args:
       conn (object):               Open MariaDB connection
       database (string, optional): Name of database that hosts the requested items
       list_type (string):          Type of item that should be displayed

    Returns:
       None
    """
    list = None
    if requested_list == "databases":
        list = sgdb.get_list_of_database_names(conn)
    elif database:
        if requested_list == "tables":
            list = sgdb.get_list_of_table_names(conn, database)
        elif requested_list == "procedures":
            list = sgdb.get_list_of_procedure_names(conn, database)

    if list is not None:
        for name in list:
            print(name)

def produce_script_from_table(conn, database, table, name_prefix, script_type):
    """Generate requested scripts"""
    scripter = SGScripter()
    
    gen_map = scripter.get_calling_dictionary(table, name_prefix);
    table_fields = sgdb.collect_table_columns(conn, database, table)

    for key, args in gen_map.items():
        print("{}: {}".format(key, args[1::]))
        args[0](table_fields, *args[1::])
    


def use_connection(conn, args):
    database = args["database"]
    table = args["table"]

    if args["list"]:
        show_list_of_items(conn, database, args["list"])
    elif args["script"] and table:
        produce_script_from_table(conn, database, table, "App_Person", args["script"])



def main():
    parser = argparse.ArgumentParser()
    prepare_argparse(parser)

    args = vars(parser.parse_args())

    conn = make_connection(args)
    if conn:
        use_connection(conn, args)
        conn.close()
    else:
        print("failed to get a connection.")

    print("Hello world.")

if __name__ == "__main__":
    main();
