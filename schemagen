#!/usr/bin/env python

""" Application used with the Schema Framework to generate procedures from tables.

The generated procedures can be used as is or as guides to best practices using
the Schema Framework.
 """

import os
import sys

# The following code causes a pylint error without cause,
# so I'm preventing the errors/warnings here:
#pylint: disable=wrong-import-position
#pylint: disable=import-error

# In order to install this program in /usr/local/bin,
# install project modules in schemagen.d and make sure
# that Python can find them:

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, script_path + '/schemagen.d')
import argparse
import sgdb
from   sgscripts import SGScripter

# Restoring pylint's default state:
#pylint: enable=import-error
#pylint: disable=enable-import-position


def get_cnf_values():
    """Get default option values from configuration file, schemagen.cnf, if it exists.
    Args:
       None

    Returns:
       (dictionary): key/value pairs found in schemagen.cnf file
    """
    cnfdict = None
    try:
        with open("./schemagen.cnf", mode="rt", encoding="ascii") as cnf:
            cnfdict = {}
            lines = cnf.readlines()
            for line in lines:
                if line[0] != '#':
                    keyval = line.rstrip("\r\n").split('=', maxsplit=1)
                    if len(keyval) == 2:
                        cnfdict[keyval[0]] = keyval[1]
    except OSError:
        pass

    return cnfdict


def prepare_argparse(parser):
    """Prepare `parser` reference with program options."""
    list_choices=[ "databases", "tables", "procedures" ]

    script_choices=[ "all", "list", "add", "read", "update", "delete" ]

    def_host = None
    def_user = None
    def_password = None
    def_database = None
    def_table = None

    cdict = get_cnf_values()
    if cdict:
        def_host = cdict["host"] if "host" in cdict else None
        def_user = cdict["user"] if "user" in cdict else None
        def_password = cdict["password"] if "password" in cdict else None
        def_database = cdict["database"] if "database" in cdict else None
        def_table = cdict["table"] if "table" in cdict else None

    # Connection Options
    conn_group = parser.add_argument_group("Connection Options")

    conn_group.add_argument("-H", "--host", default=def_host,
                        help="Host address of MariaDB database")
    conn_group.add_argument("-u", "--user", default=def_user,
                        help="MariaDB user account name")
    conn_group.add_argument("-p", "--password", default=def_password,
                        help="MariaDB user account password")
    conn_group.add_argument("-d", "--database", default=def_database,
                        help="name of MariaDB database to use")
    conn_group.add_argument("-t", "--table", default=def_table,
                        help="name of MariaDB table to use")

    # Input Tweaks
    tweaks_group = parser.add_argument_group("Input Tweaks")
    tweaks_group.add_argument("-c", "--confirm_fields",
                              help="Comma-separated confirmation fields for update or delete")

    # Output Types
    type_group = parser.add_argument_group("Output Types")
    type_group.add_argument("-a", "--args", action="store_true",
                        help="Show arguments in schemagen.cnf style.")
    type_group.add_argument("-l", "--list", choices=list_choices,
                        help="Display list of items.")
    type_group.add_argument("-s", "--script", choices=script_choices,
                        help="Produce specified procedure(s) from the table.")

    # Output String Settings
    strings_group = parser.add_argument_group("Output String Settings")
    strings_group.add_argument("-P", "--proc_prefix",
                        help="Stored procedure name prefix that precedes the procedure type.")
    strings_group.add_argument("-D", "--delimiter", default="$$",
                        help="Delimiter to indicate the end of CREATE PROCEDURE statements.")

    # Output Formatting
    format_group = parser.add_argument_group("Output Formatting")
    format_group.add_argument("-I", "--indent-chars", type=int, default=4,
                        help="Number of character to indent each level of script code.")
    format_group.add_argument("-i", "--items-per-line", type=int, default=-1,
                        help="maximum items per line of parameters or fields, -1 for unlimited")
    format_group.add_argument("-m", "--max-chars", type=int ,default=80,
                        help="maximum characters per line")


def make_connection(args):
    """Create a connection with information_schema in order to collect database info."
    Args:
       args (dictionary):  Map of command line arguments.

    Returns:
       (object): Open MariaDB connection if successful, None if not.
    """
    host = args["host"]
    user = args["user"]
    password = args["password"]

    if host and user:
        return sgdb.make_connection(host, user, password)

    return None

def show_list_of_items(conn, database, list_type):
    """Output a list of names as indicated by list_choices in prepare_argparse().

    Args:
       conn (object):               Open MariaDB connection
       database (string, optional): Name of database that hosts the requested items
       list_type (string):          Type of item that should be displayed

    Returns:
       None
    """
    ilist = None
    if list_type == "databases":
        ilist = sgdb.get_list_of_database_names(conn)
    elif database:
        if list_type == "tables":
            ilist = sgdb.get_list_of_table_names(conn, database)
        elif list_type == "procedures":
            ilist = sgdb.get_list_of_procedure_names(conn, database)

    if ilist is not None:
        for name in ilist:
            print(name)

def get_requested_table_columns(table_columns, field_names):
    """Get a list of column objects from `table_fields` that match names in `confirm_fields`
    Args:
       table_columns (list of dicts): List of column dictionaries from a table
       field_names (string):          Comma-separated list of field names

    Returns:
       (list of dicts): subset of `table_fields` whose names are found in `field_names`
                        which might be an empty list
    """
    columns_list = []
    if field_names is not None:
        requested_field_names = field_names.split(',')
        for field_name in requested_field_names:
            found_column = sgdb.get_table_column_by_name(table_columns,
                                                         field_name.strip())
            if found_column:
                columns_list.append(found_column)

    return columns_list

def produce_script_from_table(conn, args):
    """Generate requested scripts
    Args:
       conn (object):        open MariaDB connection
       args (dictionary):    map of command line parameters, many of which
                             will be used to configure the output.

    Returns:
       None
    """
    database = args["database"]
    table = args["table"]

    script_type = args["script"]

    items_per_line = args["items_per_line"]
    max_chars = args["max_chars"]
    indent_chars = args["indent_chars"]
    delim = args["delimiter"]

    proc_prefix = args["proc_prefix"]
    if proc_prefix is None:
        proc_prefix = f"App_{table.capitalize()}_"

    scripter = SGScripter(tabstop=indent_chars,
                          delimiter=delim,
                          printer_limit=max_chars,
                          printer_items_per_line=items_per_line)

    table_fields = sgdb.collect_table_columns(conn, database, table)

    confirm_fields = get_requested_table_columns(table_fields, args["confirm_fields"])
    confirm_fields = sgdb.prune_confirm_field_list(table_fields, confirm_fields)

    gen_map = scripter.get_calling_dictionary(table, proc_prefix, confirm_fields)

    if script_type == "all":
        for fargs in gen_map.values():
            print("-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --")
            fargs[0](table_fields, *fargs[1::])
            print()
    else:
        fargs = gen_map[script_type]
        if fargs:
            fargs[0](table_fields, *fargs[1::])

def display_cnf_from_args(args):
    """Write out a set of arguments for use in a schemagen.cnf file."""
    saveable = [ "host", "user", "password", "database", "table" ]
    for key, value in args.items():
        if key in saveable:
            if value is None:
                print(f"# {key}=")
            else:
                print(f"{key}={value}")


def use_connection(conn, args):
    """Starts requested tasks once the connection has been made.
    Args:
       conn (object):     open MariaDB connection
       args (dictionary): arguments collected by `argparse`.

    Returns:
       None
    """
    database = args["database"]
    table = args["table"]

    if args["list"]:
        show_list_of_items(conn, database, args["list"])
    elif args["script"] and table:
        produce_script_from_table(conn, args)

def main():
    """ Application entry point """
    parser = argparse.ArgumentParser()
    prepare_argparse(parser)

    args = vars(parser.parse_args())

    conn = make_connection(args)
    if conn:
        if args["args"]:
            display_cnf_from_args(args)
        else:
            use_connection(conn, args)
        conn.close()
    else:
        print("failed to get a connection.")

if __name__ == "__main__":
    main()
